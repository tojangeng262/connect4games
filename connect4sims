import numpy as np
import csv
from itertools import permutations

# Constants for the board size and players
ROWS = 6
COLS = 7
EMPTY = 0
PLAYER_ONE = 1
PLAYER_TWO = 2

# Initialize the board
def create_board():
    return np.zeros((ROWS, COLS), dtype=int)

# Drop a piece into the board
def drop_piece(board, row, col, piece):
    board[row, col] = piece

# Check if the column is valid for a move
def is_valid_move(board, col):
    return 0 <= col < COLS and board[0, col] == EMPTY

# Get the next open row in a column
def get_next_open_row(board, col):
    for row in range(ROWS - 1, -1, -1):
        if board[row, col] == EMPTY:
            return row
    return -1

# Check for win condition
def check_win(board, piece):
    # Check horizontal locations for win
    for r in range(ROWS):
        for c in range(COLS - 3):
            if all(board[r, c + i] == piece for i in range(4)):
                return True

    # Check vertical locations for win
    for r in range(ROWS - 3):
        for c in range(COLS):
            if all(board[r + i, c] == piece for i in range(4)):
                return True

    # Check positively sloped diagonals
    for r in range(ROWS - 3):
        for c in range(COLS - 3):
            if all(board[r + i, c + i] == piece for i in range(4)):
                return True

    # Check negatively sloped diagonals
    for r in range(3, ROWS):
        for c in range(COLS - 3):
            if all(board[r - i, c + i] == piece for i in range(4)):
                return True

    return False

# Map columns to letters
COLUMN_MAP = {0: "A", 1: "B", 2: "C", 3: "D", 4: "E", 5: "F", 6: "G"}

# Get canonical form of the board to handle symmetry
def get_canonical_form(board):
    flipped_board = np.fliplr(board)
    return min(board.tobytes(), flipped_board.tobytes())

# Simulate a random game
def simulate_game():
    board = create_board()
    game_over = False
    turn = 0
    move_history = []

    while not game_over:
        current_player = PLAYER_ONE if turn % 2 == 0 else PLAYER_TWO
        valid_move = False

        while not valid_move:
            col = np.random.randint(0, COLS)  #iterate every move from the list
            if is_valid_move(board, col):
                row = get_next_open_row(board, col)
                drop_piece(board, row, col, current_player)
                move_history.append(COLUMN_MAP[col])
                valid_move = True

        if check_win(board, current_player):
            return move_history, current_player

        if all(not is_valid_move(board, col) for col in range(COLS)):
            return move_history, "Draw"

        turn += 1

# Main function to generate data
def generate_data(num_games):
    unique_games = set()

    with open("contohconnect4_games.csv", "w", newline="") as csvfile:
        csv_writer = csv.writer(csvfile)
        csv_writer.writerow(["Game Number", "Move History", "Result"])

        for game_number in range(1, num_games + 1):
            board = create_board()
            move_history, result = simulate_game()

            # Generate board after moves for symmetry check
            for move in move_history:
                col = list(COLUMN_MAP.keys())[list(COLUMN_MAP.values()).index(move)]
                row = get_next_open_row(board, col)
                current_player = PLAYER_ONE if len(move_history) % 2 == 0 else PLAYER_TWO
                drop_piece(board, row, col, current_player)

            canonical_form = get_canonical_form(board)
            if canonical_form not in unique_games:
                unique_games.add(canonical_form)
                csv_writer.writerow([game_number, " ".join(move_history), result])

# Generate data
if __name__ == "__main__":
    generate_data(100) #number of simulated you want to get

