# Heuristic Bot
class HeuristicBot(Bot):
    def _get_next_open_row(self, board, col):
        col_array = board[:, col]
        zero_indices = np.where(col_array == 0)[0]
        if len(zero_indices) > 0:
            return zero_indices[-1]
        return None

    def _winning_move(self, board, piece, rows, columns):
        for r in range(rows):
            row = board[r]
            for c in range(columns - 3):
                if np.all(row[c:c+4] == piece):
                    return True
        for c in range(columns):
            col = board[:, c]
            for r in range(rows - 3):
                if np.all(col[r:r+4] == piece):
                    return True
        for r in range(rows - 3):
            for c in range(columns - 3):
                window = [board[r+i, c+i] for i in range(4)]
                if all(x == piece for x in window):
                    return True
        for r in range(3, rows):
            for c in range(columns - 3):
                window = [board[r-i, c+i] for i in range(4)]
                if all(x == piece for x in window):
                    return True
        return False

    def choose_move(self, game):
        valid_columns = [col for col in range(game.columns) if game.is_valid_move(col)]
        for col in valid_columns:
            board_copy = game.board.copy()
            row = self._get_next_open_row(board_copy, col)
            if row is not None:
                board_copy[row, col] = self.player_id
                if self._winning_move(board_copy, self.player_id, game.rows, game.columns):
                    return col
        opponent = 2 if self.player_id == 1 else 1
        for col in valid_columns:
            board_copy = game.board.copy()
            row = self._get_next_open_row(board_copy, col)
            if row is not None:
                board_copy[row, col] = opponent
                if self._winning_move(board_copy, opponent, game.rows, game.columns):
                    return col
        center = game.columns // 2
        if center in valid_columns:
            return center
        best_score = -float('inf')
        best_col = None
        for col in valid_columns:
            score = -abs(col - center)
            if score > best_score:
                best_score = score
                best_col = col
        return best_col if best_col is not None else random.choice(valid_columns)
