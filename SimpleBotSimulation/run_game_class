def run_game(bot1_class, bot2_class, bot1_name, bot2_name, game_number, ordering):
    """
    Runs a single game between two bot classes.
    
    Parameters:
        bot1_class, bot2_class: The classes for the two bots.
        bot1_name, bot2_name: Their string identifiers.
        game_number: An integer for the game number.
        ordering: "normal" means bot1 is Player 1 and bot2 is Player 2;
                  "reversed" means bot2 is Player 1 and bot1 is Player 2.
    
    Returns:
        A dictionary containing metadata and the move log of the game.
    """
    game = Connect4Game()  # Create a new Connect 4 game instance.
    
    # Instantiate the bots according to the ordering.
    if ordering == "normal":
        player1 = bot1_class(player_id=1)
        player2 = bot2_class(player_id=2)
        bot1_id = bot1_name
        bot2_id = bot2_name
    else:  # "reversed" ordering.
        player1 = bot2_class(player_id=1)
        player2 = bot1_class(player_id=2)
        bot1_id = bot2_name  # In the metadata, bot1 is always the one playing as Player 1.
        bot2_id = bot1_name

    # Game loop: Continue until the game ends.
    while not game.game_over:
        if game.current_player == 1:
            chosen_move = player1.choose_move(game)
        else:
            chosen_move = player2.choose_move(game)
        
        # Make the move (our Connect4Game.make_move handles validity and logging).
        valid = game.make_move(chosen_move)
        if not valid:
            # This is a fallback: if a bot somehow returns an invalid move, pick the first valid move.
            valid_moves = [col for col in range(game.columns) if game.is_valid_move(col)]
            if valid_moves:
                game.make_move(valid_moves[0])
            else:
                break  # No valid moves remain.

        # Safety check: stop if the board is full.
        if len(game.move_log) >= game.rows * game.columns:
            break

    # Determine the winner.
    # We assume that when a winning move is made, game.game_over is set.
    if game.move_log:
        # The last move recorded is assumed to be the winning move.
        winning_player = game.move_log[-1]["player"]
        # Map the winning player to the corresponding bot ID.
        if ordering == "normal":
            winner_bot = bot1_id if winning_player == 1 else bot2_id
        else:
            winner_bot = bot1_id if winning_player == 1 else bot2_id
    else:
        winner_bot = "Draw"

    # Build the game record with metadata.
    game_record = {
        "metadata": {
            "bot1": bot1_id,
            "bot2": bot2_id,
            "game_number": game_number,
            "ordering": ordering,  # Indicates which bot was assigned Player 1.
            "result": winner_bot
        },
        "move_log": game.move_log
    }
    return game_record


def run_simulation():
    """
    Runs a tournament simulation where every pair of distinct bots plays 100 games.
    For each pairing:
      - 50 games are played with one bot as Player 1.
      - 50 games are played with the roles reversed.
    Each game is saved as a JSON file in the 'simulation_game_logs' directory.
    """
    # Create the directory to store game logs.
    simulation_dir = f"simulation_game_logs_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}"
    os.makedirs(simulation_dir, exist_ok=True)
    
    # Mapping of bot names to their classes.
    bot_classes = {
        "RandomBot": RandomBot,
        "HeuristicBot": HeuristicBot,
        "MinimaxBot": MinimaxBot,
        "MCTSBot": MCTSBot
    }
    bot_names = list(bot_classes.keys())
    total_games = 0

    # Iterate over each distinct pairing (do not pair a bot with itself).
    for i in range(len(bot_names)):
        for j in range(i + 1, len(bot_names)):
            bot1_name = bot_names[i]
            bot2_name = bot_names[j]
            bot1_class = bot_classes[bot1_name]
            bot2_class = bot_classes[bot2_name]

            # Run 50 games with "normal" ordering: bot1 is Player 1.
            for game_index in range(1, 501):
                record = run_game(bot1_class, bot2_class, bot1_name, bot2_name,
                                  game_number=game_index, ordering="normal")
                filename = os.path.join(simulation_dir,
                                        f"{bot1_name}_vs_{bot2_name}_normal_game{game_index}.json")
                with open(filename, "w") as f:
                    json.dump(record, f, indent=4)
                total_games += 1

            # Run 50 games with "reversed" ordering: bot2 is Player 1.
            for game_index in range(501, 1001):
                record = run_game(bot1_class, bot2_class, bot1_name, bot2_name,
                                  game_number=game_index, ordering="reversed")
                filename = os.path.join(simulation_dir,
                                        f"{bot1_name}_vs_{bot2_name}_reversed_game{game_index}.json")
                with open(filename, "w") as f:
                    json.dump(record, f, indent=4)
                total_games += 1

    print(f"Simulation completed. Total games played: {total_games}")


if __name__ == "__main__":
    run_simulation()
